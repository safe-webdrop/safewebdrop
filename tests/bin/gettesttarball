#!/usr/bin/bash

##############################################################################
# This file is part of the CRYPTO BONE
# File     : gettesttarball (client)
# Version  : 2.0 (ALL-IN-ONE)
# License  : BSD-3-Clause
# Date     : 20 Apr 2025
# Contact  : Please send enquiries and bug-reports to innovation@senderek.ie
#
# Copyright (c) 2015-2025
#	Ralf Senderek, Ireland.  All rights reserved. (https://senderek.ie)
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	   This product includes software developed by Ralf Senderek.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND  ANY EXPRESS OR 
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  IMPLIED WARRANTIES 
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
# POSSIBILITY OF SUCH DAMAGE.
##############################################################################

# Parameter
# $1 is ID name
# $2 is HOST
# $3 overwrites DEBUG

#----------------------------------------------------#
# load functions and global variables
. ./test-functions


if [[ -r ../safewebdrop.config ]] ; then
   . ../safewebdrop.config
fi

# let parameters overwrite ID and HOST
if (( $# >= 2 )) ; then
    ID="$1"
    HOST="$2"
    if (( $# == 3 )) ; then
         DEBUG="$3"
    fi
fi
if [[ ${DEBUG} = "yes" ]] ; then
    set -vx; exec 2>$0.trc
    /usr/bin/echo "debugging is ON ..."
fi

/usr/bin/echo "***** safewebdrop *****"
/usr/bin/echo "Reading messages and attachments as ${ID} from ${HOST} as one tarball"
/usr/bin/echo "***** ----------- *****"
/usr/bin/echo
/usr/bin/echo "Debug = ${DEBUG}"
/usr/bin/echo -n "continue? "
read REPLY
if [[ "${REPLY}x" != "yesx" ]] ; then
    /usr/bin/echo "exiting, yes continues here"
    /usr/bin/echo "usage: gettesttarball ID  HOST [[yes|no]] (overwrites config) "
    exit 1
fi   
# check directory for ${ID}
if [[ ! -d ../${ID} ]] ; then
    /usr/bin/mkdir ../${ID}
fi

# check TAR directory for ${ID}
if [[ ! -d ../${ID}/TAR ]] ; then
    /usr/bin/mkdir ../${ID}/TAR
fi
TARBALL="../${ID}/TAR/tarball.tgz"

#  download webdrops and attachments in one tarball

/usr/bin/echo "downloading webdrops and attachments ..."
# PHASE 1: send NEW request, get a challenge
CHALLENGE=$(curl https://${HOST}/cgi-bin/safewebdropgettarball?${ID}\&NEW 2>/dev/null)
/usr/bin/echo "SERVER -> I:   CHL=${CHALLENGE}  "

# PHASE 2: 
# generate a signed request
KEY="../${ID}/pubkey.pem"
clean
/usr/bin/echo -n "${ID}:" > $REQ
/usr/bin/echo -n "${CHALLENGE}:" >> $REQ
/usr/bin/echo -n "ALL" >> $REQ

# generate a hash of the request 
generate_requesthash
# and send it
REQUEST=$(/usr/bin/cat ${REQ})
/usr/bin/curl https://${HOST}/cgi-bin/safewebdropgettarball?${ID}\&${REQUEST}\&${SIG} 2>/dev/null > ${TARBALL}
NUM=$(/usr/bin/wc -c ${TARBALL} | /usr/bin/cut -f1 -d" ")
/usr/bin/echo "SERVER -> II:  tarball received ${NUM} bytes  "

if (( ${NUM} > 10 )) ; then
     /usr/bin/ls -l ${TARBALL}
     HASH=$(filehash ${TARBALL})
     
     # return the hash of the batch to the server
     clean
     /usr/bin/echo -n "${ID}:" > $REQ
     /usr/bin/echo -n "${CHALLENGE}:" >> $REQ
     /usr/bin/echo -n "${HASH}" >> $REQ
     
     # generate a hash of the request
     generate_requesthash
     # and send it
     if (( ${#SIG} > 10 )) ; then
          /usr/bin/sleep 1
          REQUEST=$(/usr/bin/cat ${REQ})
          # phase 3 : send the hash back to the server, so files can be deleted there

          OK=$(/usr/bin/curl https://${HOST}/cgi-bin/safewebdropgettarball?${ID}\&${REQUEST}\&${SIG} 2> /dev/null)
          /usr/bin/echo "SERVER -> III: ${OK} ${#OK} bytes received"
     fi
else
    /usr/bin/echo "EMPTY"
    /usr/bin/rm -f ${TARBALL} 2> /dev/null
fi

exit 0
